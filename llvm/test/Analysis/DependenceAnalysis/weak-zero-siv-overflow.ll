; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -disable-output "-passes=print<da>" 2>&1 | FileCheck %s
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=weak-zero-siv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-WEAK-ZERO-SIV

; offset = -2;
; for (i = 0; i < (1LL << 62); i++, offset += 2) {
;   if (0 <= offset)
;     A[offset] = 1;
;   A[2] = 2;
; }
;
; FIXME: DependenceAnalysis currently detects no dependency between the two
; stores, but it does exist. The root cause is that the product of the BTC and
; the coefficient triggers an overflow.
;
define void @weakzero_dst_siv_prod_ovfl(ptr %A) {
; CHECK-LABEL: 'weakzero_dst_siv_prod_ovfl'
; CHECK-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 1, ptr %gep.0, align 1
; CHECK-NEXT:    da analyze - none!
; CHECK-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-NEXT:    da analyze - none!
; CHECK-NEXT:  Src: store i8 2, ptr %gep.1, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-NEXT:    da analyze - consistent output [S]!
;
; CHECK-WEAK-ZERO-SIV-LABEL: 'weakzero_dst_siv_prod_ovfl'
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 1, ptr %gep.0, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - consistent output [*]!
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - none!
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 2, ptr %gep.1, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - consistent output [S]!
;
entry:
  br label %loop.header

loop.header:
  %i = phi i64 [ 0, %entry ], [ %i.inc, %loop.latch ]
  %offset = phi i64 [ -2, %entry ], [ %offset.next, %loop.latch ]
  %ec = icmp eq i64 %i, 4611686018427387904
  br i1 %ec, label %exit, label %loop.body

loop.body:
  %cond = icmp sge i64 %offset, 0
  br i1 %cond, label %if.then, label %loop.latch

if.then:
  %gep.0 = getelementptr inbounds i8, ptr %A, i64 %offset
  store i8 1, ptr %gep.0
  br label %loop.latch

loop.latch:
  %gep.1 = getelementptr inbounds i8, ptr %A, i64 2
  store i8 2, ptr %gep.1
  %i.inc = add nuw nsw i64 %i, 1
  %offset.next = add nsw i64 %offset, 2
  br label %loop.header

exit:
  ret void
}

; offset = -1;
; for (i = 0; i < n; i++, offset += 2) {
;   if (0 <= offset)
;     A[offset] = 1;
;   A[INT64_MAX] = 2;
; }
;
; FIXME: DependenceAnalysis currently detects no dependency between the two
; stores, but it does exist. When `%n` is 2^62, the value of `%offset` will be
; the same as INT64_MAX at the last iteration.
; The root cause is that the calculation of the differenct between the two
; constants (INT64_MAX and -1) triggers an overflow.
;
define void @weakzero_dst_siv_delta_ovfl(ptr %A, i64 %n) {
; CHECK-LABEL: 'weakzero_dst_siv_delta_ovfl'
; CHECK-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 1, ptr %gep.0, align 1
; CHECK-NEXT:    da analyze - none!
; CHECK-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-NEXT:    da analyze - none!
; CHECK-NEXT:  Src: store i8 2, ptr %gep.1, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-NEXT:    da analyze - consistent output [S]!
;
; CHECK-WEAK-ZERO-SIV-LABEL: 'weakzero_dst_siv_delta_ovfl'
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 1, ptr %gep.0, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - consistent output [*]!
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - none!
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 2, ptr %gep.1, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - consistent output [S]!
;
entry:
  %guard = icmp sgt i64 %n, 0
  br i1 %guard, label %loop.header, label %exit

loop.header:
  %i = phi i64 [ 0, %entry ], [ %i.inc, %loop.latch ]
  %offset = phi i64 [ -2, %entry ], [ %offset.next, %loop.latch ]
  %ec = icmp eq i64 %i, %n
  br i1 %ec, label %exit, label %loop.body

loop.body:
  %cond = icmp sge i64 %offset, 0
  br i1 %cond, label %if.then, label %loop.latch

if.then:
  %gep.0 = getelementptr inbounds i8, ptr %A, i64 %offset
  store i8 1, ptr %gep.0
  br label %loop.latch

loop.latch:
  %gep.1 = getelementptr inbounds i8, ptr %A, i64 9223372036854775807
  store i8 2, ptr %gep.1
  %i.inc = add nuw nsw i64 %i, 1
  %offset.next = add nsw i64 %offset, 2
  br label %loop.header

exit:
  ret void
}
