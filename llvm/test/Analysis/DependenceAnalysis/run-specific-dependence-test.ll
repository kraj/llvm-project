; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=all 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-ALL
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=strong-siv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-STRONG-SIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=weak-crossing-siv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-WEAK-CROSSING-SIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=exact-siv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-EXACT-SIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=weak-zero-siv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-WEAK-ZERO-SIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=exact-rdiv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-EXACT-RDIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=symbolic-rdiv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-SYMBOLIC-RDIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=gcd-miv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-GCD-MIV
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=banerjee-miv 2>&1 \
; RUN:     | FileCheck %s --check-prefix=CHECK-BANERJEE-MIV

; for (i = 0; i < 10; i++)
;   a[i] = 0;
define void @f(ptr %a) {
; CHECK-ALL-LABEL: 'f'
; CHECK-ALL-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-ALL-NEXT:    da analyze - none!
;
; CHECK-STRONG-SIV-LABEL: 'f'
; CHECK-STRONG-SIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-STRONG-SIV-NEXT:    da analyze - none!
;
; CHECK-WEAK-CROSSING-SIV-LABEL: 'f'
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - consistent output [*]!
;
; CHECK-EXACT-SIV-LABEL: 'f'
; CHECK-EXACT-SIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-EXACT-SIV-NEXT:    da analyze - consistent output [*]!
;
; CHECK-WEAK-ZERO-SIV-LABEL: 'f'
; CHECK-WEAK-ZERO-SIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-WEAK-ZERO-SIV-NEXT:    da analyze - consistent output [*]!
;
; CHECK-EXACT-RDIV-LABEL: 'f'
; CHECK-EXACT-RDIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-EXACT-RDIV-NEXT:    da analyze - consistent output [*]!
;
; CHECK-SYMBOLIC-RDIV-LABEL: 'f'
; CHECK-SYMBOLIC-RDIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-SYMBOLIC-RDIV-NEXT:    da analyze - consistent output [*]!
;
; CHECK-GCD-MIV-LABEL: 'f'
; CHECK-GCD-MIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-GCD-MIV-NEXT:    da analyze - consistent output [*]!
;
; CHECK-BANERJEE-MIV-LABEL: 'f'
; CHECK-BANERJEE-MIV-NEXT:  Src: store i8 0, ptr %gep, align 1 --> Dst: store i8 0, ptr %gep, align 1
; CHECK-BANERJEE-MIV-NEXT:    da analyze - consistent output [*]!
;
entry:
  br label %loop

loop:
  %i = phi i64 [ 0, %entry ], [ %i.inc, %loop ]
  %gep = getelementptr inbounds nuw i8, ptr %a, i64 %i
  store i8 0, ptr %gep
  %i.inc = add nuw nsw i64 %i, 1
  %ec = icmp eq i64 %i.inc, 10
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}
