; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64-- -O1 -fast-isel=0 -global-isel=false %s -o - | FileCheck -check-prefix=NOLSE %s
; RUN: llc -mtriple=aarch64-- -mattr=+lse -O1 -fast-isel=0 -global-isel=false %s -o - | FileCheck -check-prefix=LSE %s

define half @test_atomicrmw_fadd_f16_seq_cst_align2(ptr %ptr, half %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_f16_seq_cst_align2:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    fcvt s1, h0
; NOLSE-NEXT:  .LBB0_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxrh w8, [x0]
; NOLSE-NEXT:    fmov s0, w8
; NOLSE-NEXT:    fcvt s2, h0
; NOLSE-NEXT:    fadd s2, s2, s1
; NOLSE-NEXT:    fcvt h2, s2
; NOLSE-NEXT:    fmov w8, s2
; NOLSE-NEXT:    stlxrh w9, w8, [x0]
; NOLSE-NEXT:    cbnz w9, .LBB0_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_f16_seq_cst_align2:
; LSE:       // %bb.0:
; LSE-NEXT:    fcvt s1, h0
; LSE-NEXT:    ldr h0, [x0]
; LSE-NEXT:  .LBB0_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fcvt s2, h0
; LSE-NEXT:    fmov w8, s0
; LSE-NEXT:    mov w10, w8
; LSE-NEXT:    fadd s2, s2, s1
; LSE-NEXT:    fcvt h2, s2
; LSE-NEXT:    fmov w9, s2
; LSE-NEXT:    casalh w10, w9, [x0]
; LSE-NEXT:    fmov s0, w10
; LSE-NEXT:    cmp w10, w8, uxth
; LSE-NEXT:    b.ne .LBB0_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, half %value seq_cst, align 2
  ret half %res
}

define half @test_atomicrmw_fadd_f16_seq_cst_align4(ptr %ptr, half %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_f16_seq_cst_align4:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    fcvt s1, h0
; NOLSE-NEXT:  .LBB1_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxrh w8, [x0]
; NOLSE-NEXT:    fmov s0, w8
; NOLSE-NEXT:    fcvt s2, h0
; NOLSE-NEXT:    fadd s2, s2, s1
; NOLSE-NEXT:    fcvt h2, s2
; NOLSE-NEXT:    fmov w8, s2
; NOLSE-NEXT:    stlxrh w9, w8, [x0]
; NOLSE-NEXT:    cbnz w9, .LBB1_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_f16_seq_cst_align4:
; LSE:       // %bb.0:
; LSE-NEXT:    fcvt s1, h0
; LSE-NEXT:    ldr h0, [x0]
; LSE-NEXT:  .LBB1_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fcvt s2, h0
; LSE-NEXT:    fmov w8, s0
; LSE-NEXT:    mov w10, w8
; LSE-NEXT:    fadd s2, s2, s1
; LSE-NEXT:    fcvt h2, s2
; LSE-NEXT:    fmov w9, s2
; LSE-NEXT:    casalh w10, w9, [x0]
; LSE-NEXT:    fmov s0, w10
; LSE-NEXT:    cmp w10, w8, uxth
; LSE-NEXT:    b.ne .LBB1_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, half %value seq_cst, align 4
  ret half %res
}

define bfloat @test_atomicrmw_fadd_bf16_seq_cst_align2(ptr %ptr, bfloat %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_bf16_seq_cst_align2:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    // kill: def $h0 killed $h0 def $s0
; NOLSE-NEXT:    fmov w9, s0
; NOLSE-NEXT:    mov w8, #32767 // =0x7fff
; NOLSE-NEXT:    lsl w9, w9, #16
; NOLSE-NEXT:    fmov s1, w9
; NOLSE-NEXT:  .LBB2_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxrh w9, [x0]
; NOLSE-NEXT:    fmov s0, w9
; NOLSE-NEXT:    lsl w9, w9, #16
; NOLSE-NEXT:    fmov s2, w9
; NOLSE-NEXT:    fadd s2, s2, s1
; NOLSE-NEXT:    fmov w9, s2
; NOLSE-NEXT:    ubfx w10, w9, #16, #1
; NOLSE-NEXT:    add w9, w9, w8
; NOLSE-NEXT:    add w9, w10, w9
; NOLSE-NEXT:    lsr w9, w9, #16
; NOLSE-NEXT:    stlxrh w10, w9, [x0]
; NOLSE-NEXT:    cbnz w10, .LBB2_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_bf16_seq_cst_align2:
; LSE:       // %bb.0:
; LSE-NEXT:    // kill: def $h0 killed $h0 def $s0
; LSE-NEXT:    fmov w9, s0
; LSE-NEXT:    mov w8, #32767 // =0x7fff
; LSE-NEXT:    ldr h0, [x0]
; LSE-NEXT:    lsl w9, w9, #16
; LSE-NEXT:    fmov s1, w9
; LSE-NEXT:  .LBB2_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fmov w9, s0
; LSE-NEXT:    lsl w9, w9, #16
; LSE-NEXT:    fmov s2, w9
; LSE-NEXT:    fadd s2, s2, s1
; LSE-NEXT:    fmov w9, s2
; LSE-NEXT:    ubfx w10, w9, #16, #1
; LSE-NEXT:    add w9, w9, w8
; LSE-NEXT:    add w9, w10, w9
; LSE-NEXT:    fmov w10, s0
; LSE-NEXT:    lsr w9, w9, #16
; LSE-NEXT:    mov w11, w10
; LSE-NEXT:    casalh w11, w9, [x0]
; LSE-NEXT:    fmov s0, w11
; LSE-NEXT:    cmp w11, w10, uxth
; LSE-NEXT:    b.ne .LBB2_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, bfloat %value seq_cst, align 2
  ret bfloat %res
}

define bfloat @test_atomicrmw_fadd_bf16_seq_cst_align4(ptr %ptr, bfloat %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_bf16_seq_cst_align4:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    // kill: def $h0 killed $h0 def $s0
; NOLSE-NEXT:    fmov w9, s0
; NOLSE-NEXT:    mov w8, #32767 // =0x7fff
; NOLSE-NEXT:    lsl w9, w9, #16
; NOLSE-NEXT:    fmov s1, w9
; NOLSE-NEXT:  .LBB3_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxrh w9, [x0]
; NOLSE-NEXT:    fmov s0, w9
; NOLSE-NEXT:    lsl w9, w9, #16
; NOLSE-NEXT:    fmov s2, w9
; NOLSE-NEXT:    fadd s2, s2, s1
; NOLSE-NEXT:    fmov w9, s2
; NOLSE-NEXT:    ubfx w10, w9, #16, #1
; NOLSE-NEXT:    add w9, w9, w8
; NOLSE-NEXT:    add w9, w10, w9
; NOLSE-NEXT:    lsr w9, w9, #16
; NOLSE-NEXT:    stlxrh w10, w9, [x0]
; NOLSE-NEXT:    cbnz w10, .LBB3_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_bf16_seq_cst_align4:
; LSE:       // %bb.0:
; LSE-NEXT:    // kill: def $h0 killed $h0 def $s0
; LSE-NEXT:    fmov w9, s0
; LSE-NEXT:    mov w8, #32767 // =0x7fff
; LSE-NEXT:    ldr h0, [x0]
; LSE-NEXT:    lsl w9, w9, #16
; LSE-NEXT:    fmov s1, w9
; LSE-NEXT:  .LBB3_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fmov w9, s0
; LSE-NEXT:    lsl w9, w9, #16
; LSE-NEXT:    fmov s2, w9
; LSE-NEXT:    fadd s2, s2, s1
; LSE-NEXT:    fmov w9, s2
; LSE-NEXT:    ubfx w10, w9, #16, #1
; LSE-NEXT:    add w9, w9, w8
; LSE-NEXT:    add w9, w10, w9
; LSE-NEXT:    fmov w10, s0
; LSE-NEXT:    lsr w9, w9, #16
; LSE-NEXT:    mov w11, w10
; LSE-NEXT:    casalh w11, w9, [x0]
; LSE-NEXT:    fmov s0, w11
; LSE-NEXT:    cmp w11, w10, uxth
; LSE-NEXT:    b.ne .LBB3_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    // kill: def $h0 killed $h0 killed $s0
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, bfloat %value seq_cst, align 4
  ret bfloat %res
}

define float @test_atomicrmw_fadd_f32_seq_cst_align4(ptr %ptr, float %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_f32_seq_cst_align4:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:  .LBB4_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxr w8, [x0]
; NOLSE-NEXT:    fmov s1, w8
; NOLSE-NEXT:    fadd s2, s1, s0
; NOLSE-NEXT:    fmov w8, s2
; NOLSE-NEXT:    stlxr w9, w8, [x0]
; NOLSE-NEXT:    cbnz w9, .LBB4_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    fmov s0, s1
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_f32_seq_cst_align4:
; LSE:       // %bb.0:
; LSE-NEXT:    ldr s1, [x0]
; LSE-NEXT:  .LBB4_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fadd s2, s1, s0
; LSE-NEXT:    fmov w8, s1
; LSE-NEXT:    mov w10, w8
; LSE-NEXT:    fmov w9, s2
; LSE-NEXT:    casal w10, w9, [x0]
; LSE-NEXT:    fmov s1, w10
; LSE-NEXT:    cmp w10, w8
; LSE-NEXT:    b.ne .LBB4_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    fmov s0, s1
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, float %value seq_cst, align 4
  ret float %res
}

define double @test_atomicrmw_fadd_f32_seq_cst_align8(ptr %ptr, double %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_f32_seq_cst_align8:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:  .LBB5_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxr x8, [x0]
; NOLSE-NEXT:    fmov d1, x8
; NOLSE-NEXT:    fadd d2, d1, d0
; NOLSE-NEXT:    fmov x8, d2
; NOLSE-NEXT:    stlxr w9, x8, [x0]
; NOLSE-NEXT:    cbnz w9, .LBB5_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    fmov d0, d1
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_f32_seq_cst_align8:
; LSE:       // %bb.0:
; LSE-NEXT:    ldr d1, [x0]
; LSE-NEXT:  .LBB5_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fadd d2, d1, d0
; LSE-NEXT:    fmov x8, d1
; LSE-NEXT:    mov x10, x8
; LSE-NEXT:    fmov x9, d2
; LSE-NEXT:    casal x10, x9, [x0]
; LSE-NEXT:    fmov d1, x10
; LSE-NEXT:    cmp x10, x8
; LSE-NEXT:    b.ne .LBB5_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    fmov d0, d1
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, double %value seq_cst, align 8
  ret double %res
}

define fp128 @test_atomicrmw_fadd_f32_seq_cst_align16(ptr %ptr, fp128 %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_f32_seq_cst_align16:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    sub sp, sp, #80
; NOLSE-NEXT:    stp x30, x19, [sp, #64] // 16-byte Folded Spill
; NOLSE-NEXT:    mov x19, x0
; NOLSE-NEXT:    str q0, [sp, #16] // 16-byte Folded Spill
; NOLSE-NEXT:  .LBB6_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxp x8, x9, [x19]
; NOLSE-NEXT:    ldr q1, [sp, #16] // 16-byte Folded Reload
; NOLSE-NEXT:    stp x8, x9, [sp, #48]
; NOLSE-NEXT:    ldr q0, [sp, #48]
; NOLSE-NEXT:    str q0, [sp] // 16-byte Folded Spill
; NOLSE-NEXT:    bl __addtf3
; NOLSE-NEXT:    str q0, [sp, #32]
; NOLSE-NEXT:    ldp x9, x8, [sp, #32]
; NOLSE-NEXT:    stlxp w10, x9, x8, [x19]
; NOLSE-NEXT:    cbnz w10, .LBB6_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    ldp x30, x19, [sp, #64] // 16-byte Folded Reload
; NOLSE-NEXT:    ldr q0, [sp] // 16-byte Folded Reload
; NOLSE-NEXT:    add sp, sp, #80
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_f32_seq_cst_align16:
; LSE:       // %bb.0:
; LSE-NEXT:    sub sp, sp, #96
; LSE-NEXT:    ldr q1, [x0]
; LSE-NEXT:    stp x30, x19, [sp, #80] // 16-byte Folded Spill
; LSE-NEXT:    mov x19, x0
; LSE-NEXT:    str q0, [sp] // 16-byte Folded Spill
; LSE-NEXT:  .LBB6_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    mov v0.16b, v1.16b
; LSE-NEXT:    str q1, [sp, #16] // 16-byte Folded Spill
; LSE-NEXT:    ldr q1, [sp] // 16-byte Folded Reload
; LSE-NEXT:    bl __addtf3
; LSE-NEXT:    str q0, [sp, #48]
; LSE-NEXT:    ldr q0, [sp, #16] // 16-byte Folded Reload
; LSE-NEXT:    ldp x0, x1, [sp, #48]
; LSE-NEXT:    str q0, [sp, #64]
; LSE-NEXT:    ldp x2, x3, [sp, #64]
; LSE-NEXT:    mov x4, x2
; LSE-NEXT:    mov x5, x3
; LSE-NEXT:    caspal x4, x5, x0, x1, [x19]
; LSE-NEXT:    stp x4, x5, [sp, #32]
; LSE-NEXT:    cmp x5, x3
; LSE-NEXT:    ldr q1, [sp, #32]
; LSE-NEXT:    ccmp x4, x2, #0, eq
; LSE-NEXT:    b.ne .LBB6_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    ldp x30, x19, [sp, #80] // 16-byte Folded Reload
; LSE-NEXT:    mov v0.16b, v1.16b
; LSE-NEXT:    add sp, sp, #96
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, fp128 %value seq_cst, align 16
  ret fp128 %res
}

define <2 x half> @test_atomicrmw_fadd_v2f16_seq_cst_align4(ptr %ptr, <2 x half> %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_v2f16_seq_cst_align4:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    fcvtl v0.4s, v0.4h
; NOLSE-NEXT:  .LBB7_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxr w8, [x0]
; NOLSE-NEXT:    fmov s1, w8
; NOLSE-NEXT:    fcvtl v1.4s, v1.4h
; NOLSE-NEXT:    fadd v1.4s, v1.4s, v0.4s
; NOLSE-NEXT:    fcvtn v1.4h, v1.4s
; NOLSE-NEXT:    fmov w9, s1
; NOLSE-NEXT:    stlxr w10, w9, [x0]
; NOLSE-NEXT:    cbnz w10, .LBB7_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    fmov d0, x8
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_v2f16_seq_cst_align4:
; LSE:       // %bb.0:
; LSE-NEXT:    fcvtl v1.4s, v0.4h
; LSE-NEXT:    ldr s0, [x0]
; LSE-NEXT:  .LBB7_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fcvtl v2.4s, v0.4h
; LSE-NEXT:    fmov w8, s0
; LSE-NEXT:    mov w10, w8
; LSE-NEXT:    fadd v2.4s, v2.4s, v1.4s
; LSE-NEXT:    fcvtn v2.4h, v2.4s
; LSE-NEXT:    fmov w9, s2
; LSE-NEXT:    casal w10, w9, [x0]
; LSE-NEXT:    fmov s0, w10
; LSE-NEXT:    cmp w10, w8
; LSE-NEXT:    b.ne .LBB7_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, <2 x half> %value seq_cst, align 4
  ret <2 x half> %res
}

define <2 x bfloat> @test_atomicrmw_fadd_v2bf16_seq_cst_align4(ptr %ptr, <2 x bfloat> %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_v2bf16_seq_cst_align4:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:    movi v1.4s, #1
; NOLSE-NEXT:    movi v2.4s, #127, msl #8
; NOLSE-NEXT:    shll v0.4s, v0.4h, #16
; NOLSE-NEXT:  .LBB8_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxr w8, [x0]
; NOLSE-NEXT:    fmov s3, w8
; NOLSE-NEXT:    shll v3.4s, v3.4h, #16
; NOLSE-NEXT:    fadd v3.4s, v3.4s, v0.4s
; NOLSE-NEXT:    ushr v4.4s, v3.4s, #16
; NOLSE-NEXT:    and v4.16b, v4.16b, v1.16b
; NOLSE-NEXT:    add v3.4s, v4.4s, v3.4s
; NOLSE-NEXT:    addhn v3.4h, v3.4s, v2.4s
; NOLSE-NEXT:    fmov w9, s3
; NOLSE-NEXT:    stlxr w10, w9, [x0]
; NOLSE-NEXT:    cbnz w10, .LBB8_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    fmov d0, x8
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_v2bf16_seq_cst_align4:
; LSE:       // %bb.0:
; LSE-NEXT:    movi v1.4s, #1
; LSE-NEXT:    movi v2.4s, #127, msl #8
; LSE-NEXT:    shll v3.4s, v0.4h, #16
; LSE-NEXT:    ldr s0, [x0]
; LSE-NEXT:  .LBB8_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    shll v4.4s, v0.4h, #16
; LSE-NEXT:    fmov w8, s0
; LSE-NEXT:    fadd v4.4s, v4.4s, v3.4s
; LSE-NEXT:    mov w10, w8
; LSE-NEXT:    ushr v5.4s, v4.4s, #16
; LSE-NEXT:    and v5.16b, v5.16b, v1.16b
; LSE-NEXT:    add v4.4s, v5.4s, v4.4s
; LSE-NEXT:    addhn v4.4h, v4.4s, v2.4s
; LSE-NEXT:    fmov w9, s4
; LSE-NEXT:    casal w10, w9, [x0]
; LSE-NEXT:    fmov s0, w10
; LSE-NEXT:    cmp w10, w8
; LSE-NEXT:    b.ne .LBB8_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, <2 x bfloat> %value seq_cst, align 4
  ret <2 x bfloat> %res
}

define <2 x float> @test_atomicrmw_fadd_v2f32_seq_cst_align8(ptr %ptr, <2 x float> %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_v2f32_seq_cst_align8:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:  .LBB9_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxr x8, [x0]
; NOLSE-NEXT:    fmov d1, x8
; NOLSE-NEXT:    fadd v2.2s, v1.2s, v0.2s
; NOLSE-NEXT:    fmov x8, d2
; NOLSE-NEXT:    stlxr w9, x8, [x0]
; NOLSE-NEXT:    cbnz w9, .LBB9_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    fmov d0, d1
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_v2f32_seq_cst_align8:
; LSE:       // %bb.0:
; LSE-NEXT:    ldr d1, [x0]
; LSE-NEXT:  .LBB9_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fadd v2.2s, v1.2s, v0.2s
; LSE-NEXT:    fmov x8, d1
; LSE-NEXT:    mov x10, x8
; LSE-NEXT:    fmov x9, d2
; LSE-NEXT:    casal x10, x9, [x0]
; LSE-NEXT:    fmov d1, x10
; LSE-NEXT:    cmp x10, x8
; LSE-NEXT:    b.ne .LBB9_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    fmov d0, d1
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, <2 x float> %value seq_cst, align 8
  ret <2 x float> %res
}

define <2 x double> @test_atomicrmw_fadd_v2f64_seq_cst_align8(ptr %ptr, <2 x double> %value) #0 {
; NOLSE-LABEL: test_atomicrmw_fadd_v2f64_seq_cst_align8:
; NOLSE:       // %bb.0:
; NOLSE-NEXT:  .LBB10_1: // %atomicrmw.start
; NOLSE-NEXT:    // =>This Inner Loop Header: Depth=1
; NOLSE-NEXT:    ldaxp x8, x9, [x0]
; NOLSE-NEXT:    fmov d1, x8
; NOLSE-NEXT:    mov v1.d[1], x9
; NOLSE-NEXT:    fadd v2.2d, v1.2d, v0.2d
; NOLSE-NEXT:    mov x8, v2.d[1]
; NOLSE-NEXT:    fmov x9, d2
; NOLSE-NEXT:    stlxp w10, x9, x8, [x0]
; NOLSE-NEXT:    cbnz w10, .LBB10_1
; NOLSE-NEXT:  // %bb.2: // %atomicrmw.end
; NOLSE-NEXT:    mov v0.16b, v1.16b
; NOLSE-NEXT:    ret
;
; LSE-LABEL: test_atomicrmw_fadd_v2f64_seq_cst_align8:
; LSE:       // %bb.0:
; LSE-NEXT:    ldr q1, [x0]
; LSE-NEXT:  .LBB10_1: // %atomicrmw.start
; LSE-NEXT:    // =>This Inner Loop Header: Depth=1
; LSE-NEXT:    fadd v2.2d, v1.2d, v0.2d
; LSE-NEXT:    mov x3, v1.d[1]
; LSE-NEXT:    fmov x2, d1
; LSE-NEXT:    mov x7, x3
; LSE-NEXT:    mov x5, v2.d[1]
; LSE-NEXT:    mov x6, x2
; LSE-NEXT:    fmov x4, d2
; LSE-NEXT:    caspal x6, x7, x4, x5, [x0]
; LSE-NEXT:    fmov d1, x6
; LSE-NEXT:    cmp x7, x3
; LSE-NEXT:    ccmp x6, x2, #0, eq
; LSE-NEXT:    mov v1.d[1], x7
; LSE-NEXT:    b.ne .LBB10_1
; LSE-NEXT:  // %bb.2: // %atomicrmw.end
; LSE-NEXT:    mov v0.16b, v1.16b
; LSE-NEXT:    ret
  %res = atomicrmw fadd ptr %ptr, <2 x double> %value seq_cst, align 16
  ret <2 x double> %res
}

attributes #0 = { nounwind }
