# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc %s -o - -mtriple=aarch64-unknown-linux -run-pass=aarch64-mi-peephole-opt -verify-machineinstrs | FileCheck %s

---
name:            peephole_fmov_cbz_32bit
registers:
  - { id: 1, class: fpr32, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$s0', virtual-reg: '%1' }
body:             |
  bb.0.entry:
    liveins: $s0

    ; CHECK-LABEL: name: peephole_fmov_cbz_32bit
    ; CHECK: liveins: $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:fpr32 = COPY $s0
    ; CHECK-NEXT: [[SUBREG_TO_REG:%[0-9]+]]:fpr64 = SUBREG_TO_REG 0, [[COPY]], %subreg.ssub
    ; CHECK-NEXT: [[CMEQv2i32rz:%[0-9]+]]:fpr64 = CMEQv2i32rz [[SUBREG_TO_REG]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:fpr32 = COPY [[CMEQv2i32rz]].ssub
    ; CHECK-NEXT: FCMPSri [[COPY2]], implicit-def $nzcv, implicit $fpcr
    ; CHECK-NEXT: Bcc 6, %bb.1, implicit $nzcv
    %1:fpr32 = COPY $s0
    %2:gpr32 = FMOVSWr %1
    CBZW %2, %bb.1

  bb.1:
    RET_ReallyLR

---
name:            peephole_fmov_cbz_64bit
registers:
  - { id: 1, class: fpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$d0', virtual-reg: '%1' }
body:             |
  bb.0.entry:
    liveins: $d0

    ; CHECK-LABEL: name: peephole_fmov_cbz_64bit
    ; CHECK: liveins: $d0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:fpr64 = COPY $d0
    ; CHECK-NEXT: [[CMEQv1i64rz:%[0-9]+]]:fpr64 = CMEQv1i64rz [[COPY]]
    ; CHECK-NEXT: FCMPDri [[CMEQv1i64rz]], implicit-def $nzcv, implicit $fpcr
    ; CHECK-NEXT: Bcc 6, %bb.1, implicit $nzcv
    %1:fpr64 = COPY $d0
    %2:gpr64 = FMOVDXr %1
    CBZX %2, %bb.1

  bb.1:
    RET_ReallyLR

---
name:            peephole_fmov_cbnz_32bit
registers:
  - { id: 1, class: fpr32, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$s0', virtual-reg: '%1' }
body:             |
  bb.0.entry:
    liveins: $s0

    ; CHECK-LABEL: name: peephole_fmov_cbnz_32bit
    ; CHECK: liveins: $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:fpr32 = COPY $s0
    ; CHECK-NEXT: [[SUBREG_TO_REG:%[0-9]+]]:fpr64 = SUBREG_TO_REG 0, [[COPY]], %subreg.ssub
    ; CHECK-NEXT: [[CMEQv2i32rz:%[0-9]+]]:fpr64 = CMEQv2i32rz [[SUBREG_TO_REG]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:fpr32 = COPY [[CMEQv2i32rz]].ssub
    ; CHECK-NEXT: FCMPSri [[COPY2]], implicit-def $nzcv, implicit $fpcr
    ; CHECK-NEXT: Bcc 7, %bb.1, implicit $nzcv
    %1:fpr32 = COPY $s0
    %2:gpr32 = FMOVSWr %1
    CBNZW %2, %bb.1

  bb.1:
    RET_ReallyLR

---
name:            peephole_fmov_cbnz_64bit
registers:
  - { id: 1, class: fpr64, preferred-register: '' }
  - { id: 2, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$d0', virtual-reg: '%1' }
body:             |
  bb.0.entry:
    liveins: $d0

    ; CHECK-LABEL: name: peephole_fmov_cbnz_64bit
    ; CHECK: liveins: $d0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:fpr64 = COPY $d0
    ; CHECK-NEXT: [[CMEQv1i64rz:%[0-9]+]]:fpr64 = CMEQv1i64rz [[COPY]]
    ; CHECK-NEXT: FCMPDri [[CMEQv1i64rz]], implicit-def $nzcv, implicit $fpcr
    ; CHECK-NEXT: Bcc 7, %bb.1, implicit $nzcv
    %1:fpr64 = COPY $d0
    %2:gpr64 = FMOVDXr %1
    CBNZX %2, %bb.1

  bb.1:
    RET_ReallyLR

---
name:            peephole_fmov_cbz_multiple_uses
registers:
  - { id: 1, class: fpr32, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$s0', virtual-reg: '%1' }
body:             |
  bb.0.entry:
    liveins: $s0

    ; This should NOT be optimized because the FMOV result has multiple uses
    ; CHECK-LABEL: name: peephole_fmov_cbz_multiple_uses
    ; CHECK: liveins: $s0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:fpr32 = COPY $s0
    ; CHECK-NEXT: [[FMOVSWr:%[0-9]+]]:gpr32 = FMOVSWr [[COPY]]
    ; CHECK-NEXT: $w0 = COPY [[FMOVSWr]]
    ; CHECK-NEXT: CBZW [[FMOVSWr]], %bb.1
    ; CHECK-NEXT: RET_ReallyLR
    %1:fpr32 = COPY $s0
    %2:gpr32 = FMOVSWr %1
    $w0 = COPY %2
    CBZW %2, %bb.1
    RET_ReallyLR

  bb.1:
    RET_ReallyLR