; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=amdgcn -mcpu=bonaire -verify-machineinstrs < %s 2>%t | FileCheck -check-prefix=GFX7 %s
; RUN: FileCheck --check-prefixes=GFX8-WARN,GFX9-WARN,GFX10-WARN,GFX11-WARN %s < %t

; RUN: llc -march=amdgcn -mcpu=fiji -verify-machineinstrs < %s 2>%t | FileCheck -check-prefix=GFX8 %s
; RUN: FileCheck --check-prefixes=GFX9-WARN,GFX10-WARN,GFX11-WARN %s < %t

; RUN: llc -march=amdgcn -mcpu=gfx900 -verify-machineinstrs < %s 2>%t | FileCheck -check-prefix=GFX9 %s
; RUN: FileCheck --check-prefixes=GFX10-WARN,GFX11-WARN %s < %t

; RUN: llc -march=amdgcn -mcpu=gfx1010 -verify-machineinstrs < %s 2>%t | FileCheck -check-prefix=GFX10 %s
; RUN: FileCheck --check-prefixes=GFX11-WARN %s < %t

; Use --fatal-warnings to confirm no diagnostics are emitted for GFX11.
; RUN: llc --fatal-warnings -march=amdgcn -mcpu=gfx1100 -verify-machineinstrs < %s | FileCheck -check-prefix=GFX11 %s

; GFX8-WARN: needs_dpp {{.*}} +dpp is not supported on the current target. Deleting function body.
; GFX8-WARN: needs_16bit_insts {{.*}} +16-bit-insts is not supported on the current target. Deleting function body.
; GFX8-WARN: needs_gfx8_insts {{.*}} +gfx8-insts is not supported on the current target. Deleting function body.
; GFX9-WARN: needs_gfx9_insts {{.*}} +gfx9-insts is not supported on the current target. Deleting function body.
; GFX10-WARN: needs_gfx10_insts {{.*}} +gfx10-insts is not supported on the current target. Deleting function body.
; GFX11-WARN: needs_gfx11_insts {{.*}} +gfx11-insts is not supported on the current target. Deleting function body.

define void @needs_dpp(i64 addrspace(1)* %out, i64 addrspace(1)* %in, i64 %a, i64 %b, i64 %c) #0 {
; GFX7-LABEL: needs_dpp:
; GFX7:       ; %bb.0: ; %entry
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    s_endpgm
;
; GFX8-LABEL: needs_dpp:
; GFX8:       ; %bb.0: ; %entry
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX8-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX8-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX8-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX8-NEXT:  ; %bb.1: ; %else
; GFX8-NEXT:    v_add_u32_e32 v8, vcc, v4, v6
; GFX8-NEXT:    v_addc_u32_e32 v9, vcc, v5, v7, vcc
; GFX8-NEXT:    ; implicit-def: $vgpr2
; GFX8-NEXT:  ; %bb.2: ; %Flow
; GFX8-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX8-NEXT:    s_cbranch_execz .LBB0_4
; GFX8-NEXT:  ; %bb.3: ; %if
; GFX8-NEXT:    flat_load_dwordx2 v[8:9], v[2:3]
; GFX8-NEXT:  .LBB0_4: ; %endif
; GFX8-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    flat_store_dwordx2 v[0:1], v[8:9]
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: needs_dpp:
; GFX9:       ; %bb.0: ; %entry
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX9-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX9-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX9-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX9-NEXT:  ; %bb.1: ; %else
; GFX9-NEXT:    v_add_co_u32_e32 v8, vcc, v4, v6
; GFX9-NEXT:    v_addc_co_u32_e32 v9, vcc, v5, v7, vcc
; GFX9-NEXT:    ; implicit-def: $vgpr2
; GFX9-NEXT:  ; %bb.2: ; %Flow
; GFX9-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX9-NEXT:    s_cbranch_execz .LBB0_4
; GFX9-NEXT:  ; %bb.3: ; %if
; GFX9-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX9-NEXT:  .LBB0_4: ; %endif
; GFX9-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX10-LABEL: needs_dpp:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    v_cmp_ne_u64_e32 vcc_lo, 0, v[4:5]
; GFX10-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX10-NEXT:    s_and_saveexec_b32 s4, vcc_lo
; GFX10-NEXT:    s_xor_b32 s4, exec_lo, s4
; GFX10-NEXT:  ; %bb.1: ; %else
; GFX10-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX10-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX10-NEXT:    ; implicit-def: $vgpr2
; GFX10-NEXT:  ; %bb.2: ; %Flow
; GFX10-NEXT:    s_andn2_saveexec_b32 s4, s4
; GFX10-NEXT:    s_cbranch_execz .LBB0_4
; GFX10-NEXT:  ; %bb.3: ; %if
; GFX10-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX10-NEXT:  .LBB0_4: ; %endif
; GFX10-NEXT:    s_waitcnt_depctr 0xffe3
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX10-NEXT:    s_waitcnt vmcnt(0)
; GFX10-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: needs_dpp:
; GFX11:       ; %bb.0: ; %entry
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_mov_b32 s0, exec_lo
; GFX11-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX11-NEXT:    v_cmpx_ne_u64_e32 0, v[4:5]
; GFX11-NEXT:    s_xor_b32 s0, exec_lo, s0
; GFX11-NEXT:  ; %bb.1: ; %else
; GFX11-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX11-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX11-NEXT:    ; implicit-def: $vgpr2
; GFX11-NEXT:  ; %bb.2: ; %Flow
; GFX11-NEXT:    s_and_not1_saveexec_b32 s0, s0
; GFX11-NEXT:    s_cbranch_execz .LBB0_4
; GFX11-NEXT:  ; %bb.3: ; %if
; GFX11-NEXT:    global_load_b64 v[8:9], v[2:3], off
; GFX11-NEXT:  .LBB0_4: ; %endif
; GFX11-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX11-NEXT:    s_waitcnt vmcnt(0)
; GFX11-NEXT:    global_store_b64 v[0:1], v[8:9], off
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
entry:
  %0 = icmp eq i64 %a, 0
  br i1 %0, label %if, label %else

if:
  %1 = load i64, i64 addrspace(1)* %in
  br label %endif

else:
  %2 = add i64 %a, %b
  br label %endif

endif:
  %3 = phi i64 [%1, %if], [%2, %else]
  store i64 %3, i64 addrspace(1)* %out
  ret void
}

define void @needs_16bit_insts(i64 addrspace(1)* %out, i64 addrspace(1)* %in, i64 %a, i64 %b, i64 %c) #1 {
; GFX7-LABEL: needs_16bit_insts:
; GFX7:       ; %bb.0: ; %entry
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    s_endpgm
;
; GFX8-LABEL: needs_16bit_insts:
; GFX8:       ; %bb.0: ; %entry
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX8-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX8-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX8-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX8-NEXT:  ; %bb.1: ; %else
; GFX8-NEXT:    v_add_u32_e32 v8, vcc, v4, v6
; GFX8-NEXT:    v_addc_u32_e32 v9, vcc, v5, v7, vcc
; GFX8-NEXT:    ; implicit-def: $vgpr2
; GFX8-NEXT:  ; %bb.2: ; %Flow
; GFX8-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX8-NEXT:    s_cbranch_execz .LBB1_4
; GFX8-NEXT:  ; %bb.3: ; %if
; GFX8-NEXT:    flat_load_dwordx2 v[8:9], v[2:3]
; GFX8-NEXT:  .LBB1_4: ; %endif
; GFX8-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    flat_store_dwordx2 v[0:1], v[8:9]
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: needs_16bit_insts:
; GFX9:       ; %bb.0: ; %entry
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX9-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX9-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX9-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX9-NEXT:  ; %bb.1: ; %else
; GFX9-NEXT:    v_add_co_u32_e32 v8, vcc, v4, v6
; GFX9-NEXT:    v_addc_co_u32_e32 v9, vcc, v5, v7, vcc
; GFX9-NEXT:    ; implicit-def: $vgpr2
; GFX9-NEXT:  ; %bb.2: ; %Flow
; GFX9-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX9-NEXT:    s_cbranch_execz .LBB1_4
; GFX9-NEXT:  ; %bb.3: ; %if
; GFX9-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX9-NEXT:  .LBB1_4: ; %endif
; GFX9-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX10-LABEL: needs_16bit_insts:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    v_cmp_ne_u64_e32 vcc_lo, 0, v[4:5]
; GFX10-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX10-NEXT:    s_and_saveexec_b32 s4, vcc_lo
; GFX10-NEXT:    s_xor_b32 s4, exec_lo, s4
; GFX10-NEXT:  ; %bb.1: ; %else
; GFX10-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX10-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX10-NEXT:    ; implicit-def: $vgpr2
; GFX10-NEXT:  ; %bb.2: ; %Flow
; GFX10-NEXT:    s_andn2_saveexec_b32 s4, s4
; GFX10-NEXT:    s_cbranch_execz .LBB1_4
; GFX10-NEXT:  ; %bb.3: ; %if
; GFX10-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX10-NEXT:  .LBB1_4: ; %endif
; GFX10-NEXT:    s_waitcnt_depctr 0xffe3
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX10-NEXT:    s_waitcnt vmcnt(0)
; GFX10-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: needs_16bit_insts:
; GFX11:       ; %bb.0: ; %entry
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_mov_b32 s0, exec_lo
; GFX11-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX11-NEXT:    v_cmpx_ne_u64_e32 0, v[4:5]
; GFX11-NEXT:    s_xor_b32 s0, exec_lo, s0
; GFX11-NEXT:  ; %bb.1: ; %else
; GFX11-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX11-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX11-NEXT:    ; implicit-def: $vgpr2
; GFX11-NEXT:  ; %bb.2: ; %Flow
; GFX11-NEXT:    s_and_not1_saveexec_b32 s0, s0
; GFX11-NEXT:    s_cbranch_execz .LBB1_4
; GFX11-NEXT:  ; %bb.3: ; %if
; GFX11-NEXT:    global_load_b64 v[8:9], v[2:3], off
; GFX11-NEXT:  .LBB1_4: ; %endif
; GFX11-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX11-NEXT:    s_waitcnt vmcnt(0)
; GFX11-NEXT:    global_store_b64 v[0:1], v[8:9], off
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
entry:
  %0 = icmp eq i64 %a, 0
  br i1 %0, label %if, label %else

if:
  %1 = load i64, i64 addrspace(1)* %in
  br label %endif

else:
  %2 = add i64 %a, %b
  br label %endif

endif:
  %3 = phi i64 [%1, %if], [%2, %else]
  store i64 %3, i64 addrspace(1)* %out
  ret void
}

define void @needs_gfx8_insts(i64 addrspace(1)* %out, i64 addrspace(1)* %in, i64 %a, i64 %b, i64 %c) #2 {
; GFX7-LABEL: needs_gfx8_insts:
; GFX7:       ; %bb.0: ; %entry
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    s_endpgm
;
; GFX8-LABEL: needs_gfx8_insts:
; GFX8:       ; %bb.0: ; %entry
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX8-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX8-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX8-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX8-NEXT:  ; %bb.1: ; %else
; GFX8-NEXT:    v_add_u32_e32 v8, vcc, v4, v6
; GFX8-NEXT:    v_addc_u32_e32 v9, vcc, v5, v7, vcc
; GFX8-NEXT:    ; implicit-def: $vgpr2
; GFX8-NEXT:  ; %bb.2: ; %Flow
; GFX8-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX8-NEXT:    s_cbranch_execz .LBB2_4
; GFX8-NEXT:  ; %bb.3: ; %if
; GFX8-NEXT:    flat_load_dwordx2 v[8:9], v[2:3]
; GFX8-NEXT:  .LBB2_4: ; %endif
; GFX8-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    flat_store_dwordx2 v[0:1], v[8:9]
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: needs_gfx8_insts:
; GFX9:       ; %bb.0: ; %entry
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX9-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX9-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX9-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX9-NEXT:  ; %bb.1: ; %else
; GFX9-NEXT:    v_add_co_u32_e32 v8, vcc, v4, v6
; GFX9-NEXT:    v_addc_co_u32_e32 v9, vcc, v5, v7, vcc
; GFX9-NEXT:    ; implicit-def: $vgpr2
; GFX9-NEXT:  ; %bb.2: ; %Flow
; GFX9-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX9-NEXT:    s_cbranch_execz .LBB2_4
; GFX9-NEXT:  ; %bb.3: ; %if
; GFX9-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX9-NEXT:  .LBB2_4: ; %endif
; GFX9-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX10-LABEL: needs_gfx8_insts:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    v_cmp_ne_u64_e32 vcc_lo, 0, v[4:5]
; GFX10-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX10-NEXT:    s_and_saveexec_b32 s4, vcc_lo
; GFX10-NEXT:    s_xor_b32 s4, exec_lo, s4
; GFX10-NEXT:  ; %bb.1: ; %else
; GFX10-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX10-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX10-NEXT:    ; implicit-def: $vgpr2
; GFX10-NEXT:  ; %bb.2: ; %Flow
; GFX10-NEXT:    s_andn2_saveexec_b32 s4, s4
; GFX10-NEXT:    s_cbranch_execz .LBB2_4
; GFX10-NEXT:  ; %bb.3: ; %if
; GFX10-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX10-NEXT:  .LBB2_4: ; %endif
; GFX10-NEXT:    s_waitcnt_depctr 0xffe3
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX10-NEXT:    s_waitcnt vmcnt(0)
; GFX10-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: needs_gfx8_insts:
; GFX11:       ; %bb.0: ; %entry
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_mov_b32 s0, exec_lo
; GFX11-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX11-NEXT:    v_cmpx_ne_u64_e32 0, v[4:5]
; GFX11-NEXT:    s_xor_b32 s0, exec_lo, s0
; GFX11-NEXT:  ; %bb.1: ; %else
; GFX11-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX11-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX11-NEXT:    ; implicit-def: $vgpr2
; GFX11-NEXT:  ; %bb.2: ; %Flow
; GFX11-NEXT:    s_and_not1_saveexec_b32 s0, s0
; GFX11-NEXT:    s_cbranch_execz .LBB2_4
; GFX11-NEXT:  ; %bb.3: ; %if
; GFX11-NEXT:    global_load_b64 v[8:9], v[2:3], off
; GFX11-NEXT:  .LBB2_4: ; %endif
; GFX11-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX11-NEXT:    s_waitcnt vmcnt(0)
; GFX11-NEXT:    global_store_b64 v[0:1], v[8:9], off
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
entry:
  %0 = icmp eq i64 %a, 0
  br i1 %0, label %if, label %else

if:
  %1 = load i64, i64 addrspace(1)* %in
  br label %endif

else:
  %2 = add i64 %a, %b
  br label %endif

endif:
  %3 = phi i64 [%1, %if], [%2, %else]
  store i64 %3, i64 addrspace(1)* %out
  ret void
}

define void @needs_gfx9_insts(i64 addrspace(1)* %out, i64 addrspace(1)* %in, i64 %a, i64 %b, i64 %c) #3 {
; GFX7-LABEL: needs_gfx9_insts:
; GFX7:       ; %bb.0: ; %entry
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    s_endpgm
;
; GFX8-LABEL: needs_gfx9_insts:
; GFX8:       ; %bb.0: ; %entry
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: needs_gfx9_insts:
; GFX9:       ; %bb.0: ; %entry
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_ne_u64_e32 vcc, 0, v[4:5]
; GFX9-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX9-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX9-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX9-NEXT:  ; %bb.1: ; %else
; GFX9-NEXT:    v_add_co_u32_e32 v8, vcc, v4, v6
; GFX9-NEXT:    v_addc_co_u32_e32 v9, vcc, v5, v7, vcc
; GFX9-NEXT:    ; implicit-def: $vgpr2
; GFX9-NEXT:  ; %bb.2: ; %Flow
; GFX9-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX9-NEXT:    s_cbranch_execz .LBB3_4
; GFX9-NEXT:  ; %bb.3: ; %if
; GFX9-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX9-NEXT:  .LBB3_4: ; %endif
; GFX9-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX10-LABEL: needs_gfx9_insts:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    v_cmp_ne_u64_e32 vcc_lo, 0, v[4:5]
; GFX10-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX10-NEXT:    s_and_saveexec_b32 s4, vcc_lo
; GFX10-NEXT:    s_xor_b32 s4, exec_lo, s4
; GFX10-NEXT:  ; %bb.1: ; %else
; GFX10-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX10-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX10-NEXT:    ; implicit-def: $vgpr2
; GFX10-NEXT:  ; %bb.2: ; %Flow
; GFX10-NEXT:    s_andn2_saveexec_b32 s4, s4
; GFX10-NEXT:    s_cbranch_execz .LBB3_4
; GFX10-NEXT:  ; %bb.3: ; %if
; GFX10-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX10-NEXT:  .LBB3_4: ; %endif
; GFX10-NEXT:    s_waitcnt_depctr 0xffe3
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX10-NEXT:    s_waitcnt vmcnt(0)
; GFX10-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: needs_gfx9_insts:
; GFX11:       ; %bb.0: ; %entry
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_mov_b32 s0, exec_lo
; GFX11-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX11-NEXT:    v_cmpx_ne_u64_e32 0, v[4:5]
; GFX11-NEXT:    s_xor_b32 s0, exec_lo, s0
; GFX11-NEXT:  ; %bb.1: ; %else
; GFX11-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX11-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX11-NEXT:    ; implicit-def: $vgpr2
; GFX11-NEXT:  ; %bb.2: ; %Flow
; GFX11-NEXT:    s_and_not1_saveexec_b32 s0, s0
; GFX11-NEXT:    s_cbranch_execz .LBB3_4
; GFX11-NEXT:  ; %bb.3: ; %if
; GFX11-NEXT:    global_load_b64 v[8:9], v[2:3], off
; GFX11-NEXT:  .LBB3_4: ; %endif
; GFX11-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX11-NEXT:    s_waitcnt vmcnt(0)
; GFX11-NEXT:    global_store_b64 v[0:1], v[8:9], off
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
entry:
  %0 = icmp eq i64 %a, 0
  br i1 %0, label %if, label %else

if:
  %1 = load i64, i64 addrspace(1)* %in
  br label %endif

else:
  %2 = add i64 %a, %b
  br label %endif

endif:
  %3 = phi i64 [%1, %if], [%2, %else]
  store i64 %3, i64 addrspace(1)* %out
  ret void
}

define void @needs_gfx10_insts(i64 addrspace(1)* %out, i64 addrspace(1)* %in, i64 %a, i64 %b, i64 %c) #4 {
; GFX7-LABEL: needs_gfx10_insts:
; GFX7:       ; %bb.0: ; %entry
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    s_endpgm
;
; GFX8-LABEL: needs_gfx10_insts:
; GFX8:       ; %bb.0: ; %entry
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: needs_gfx10_insts:
; GFX9:       ; %bb.0: ; %entry
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_endpgm
;
; GFX10-LABEL: needs_gfx10_insts:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    v_cmp_ne_u64_e32 vcc_lo, 0, v[4:5]
; GFX10-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX10-NEXT:    s_and_saveexec_b32 s4, vcc_lo
; GFX10-NEXT:    s_xor_b32 s4, exec_lo, s4
; GFX10-NEXT:  ; %bb.1: ; %else
; GFX10-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX10-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX10-NEXT:    ; implicit-def: $vgpr2
; GFX10-NEXT:  ; %bb.2: ; %Flow
; GFX10-NEXT:    s_andn2_saveexec_b32 s4, s4
; GFX10-NEXT:    s_cbranch_execz .LBB4_4
; GFX10-NEXT:  ; %bb.3: ; %if
; GFX10-NEXT:    global_load_dwordx2 v[8:9], v[2:3], off
; GFX10-NEXT:  .LBB4_4: ; %endif
; GFX10-NEXT:    s_waitcnt_depctr 0xffe3
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX10-NEXT:    s_waitcnt vmcnt(0)
; GFX10-NEXT:    global_store_dwordx2 v[0:1], v[8:9], off
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: needs_gfx10_insts:
; GFX11:       ; %bb.0: ; %entry
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_mov_b32 s0, exec_lo
; GFX11-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX11-NEXT:    v_cmpx_ne_u64_e32 0, v[4:5]
; GFX11-NEXT:    s_xor_b32 s0, exec_lo, s0
; GFX11-NEXT:  ; %bb.1: ; %else
; GFX11-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX11-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX11-NEXT:    ; implicit-def: $vgpr2
; GFX11-NEXT:  ; %bb.2: ; %Flow
; GFX11-NEXT:    s_and_not1_saveexec_b32 s0, s0
; GFX11-NEXT:    s_cbranch_execz .LBB4_4
; GFX11-NEXT:  ; %bb.3: ; %if
; GFX11-NEXT:    global_load_b64 v[8:9], v[2:3], off
; GFX11-NEXT:  .LBB4_4: ; %endif
; GFX11-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX11-NEXT:    s_waitcnt vmcnt(0)
; GFX11-NEXT:    global_store_b64 v[0:1], v[8:9], off
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
entry:
  %0 = icmp eq i64 %a, 0
  br i1 %0, label %if, label %else

if:
  %1 = load i64, i64 addrspace(1)* %in
  br label %endif

else:
  %2 = add i64 %a, %b
  br label %endif

endif:
  %3 = phi i64 [%1, %if], [%2, %else]
  store i64 %3, i64 addrspace(1)* %out
  ret void
}

define void @needs_gfx11_insts(i64 addrspace(1)* %out, i64 addrspace(1)* %in, i64 %a, i64 %b, i64 %c) #5 {
; GFX7-LABEL: needs_gfx11_insts:
; GFX7:       ; %bb.0: ; %entry
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    s_endpgm
;
; GFX8-LABEL: needs_gfx11_insts:
; GFX8:       ; %bb.0: ; %entry
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: needs_gfx11_insts:
; GFX9:       ; %bb.0: ; %entry
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_endpgm
;
; GFX10-LABEL: needs_gfx11_insts:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: needs_gfx11_insts:
; GFX11:       ; %bb.0: ; %entry
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_mov_b32 s0, exec_lo
; GFX11-NEXT:    ; implicit-def: $vgpr8_vgpr9
; GFX11-NEXT:    v_cmpx_ne_u64_e32 0, v[4:5]
; GFX11-NEXT:    s_xor_b32 s0, exec_lo, s0
; GFX11-NEXT:  ; %bb.1: ; %else
; GFX11-NEXT:    v_add_co_u32 v8, vcc_lo, v4, v6
; GFX11-NEXT:    v_add_co_ci_u32_e32 v9, vcc_lo, v5, v7, vcc_lo
; GFX11-NEXT:    ; implicit-def: $vgpr2
; GFX11-NEXT:  ; %bb.2: ; %Flow
; GFX11-NEXT:    s_and_not1_saveexec_b32 s0, s0
; GFX11-NEXT:    s_cbranch_execz .LBB5_4
; GFX11-NEXT:  ; %bb.3: ; %if
; GFX11-NEXT:    global_load_b64 v[8:9], v[2:3], off
; GFX11-NEXT:  .LBB5_4: ; %endif
; GFX11-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX11-NEXT:    s_waitcnt vmcnt(0)
; GFX11-NEXT:    global_store_b64 v[0:1], v[8:9], off
; GFX11-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
entry:
  %0 = icmp eq i64 %a, 0
  br i1 %0, label %if, label %else

if:
  %1 = load i64, i64 addrspace(1)* %in
  br label %endif

else:
  %2 = add i64 %a, %b
  br label %endif

endif:
  %3 = phi i64 [%1, %if], [%2, %else]
  store i64 %3, i64 addrspace(1)* %out
  ret void
}

attributes #0 = { "target-features"="+dpp" }
attributes #1 = { "target-features"="+16-bit-insts" }
attributes #2 = { "target-features"="+gfx8-insts" }
attributes #3 = { "target-features"="+gfx9-insts" }
attributes #4 = { "target-features"="+gfx10-insts" }
attributes #5 = { "target-features"="+gfx11-insts" }
