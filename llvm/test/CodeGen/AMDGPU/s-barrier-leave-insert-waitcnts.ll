; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 6
; RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -stop-after=si-insert-waitcnts < %s | FileCheck -check-prefix=GFX12 %s

define amdgpu_ps void @func(i32 inreg %val, ptr addrspace(1) %out) {
  ; GFX12-LABEL: name: func
  ; GFX12: bb.0 (%ir-block.0):
  ; GFX12-NEXT:   liveins: $sgpr0, $vgpr0, $vgpr1
  ; GFX12-NEXT: {{  $}}
  ; GFX12-NEXT:   S_BARRIER_LEAVE implicit-def dead $scc
  ; GFX12-NEXT:   S_WAIT_KMCNT 0
  ; GFX12-NEXT:   S_CMP_LG_U32 killed renamable $sgpr0, 0, implicit-def $scc
  ; GFX12-NEXT:   renamable $sgpr0 = S_MOVK_I32 123
  ; GFX12-NEXT:   renamable $sgpr0 = S_CSELECT_B32 killed renamable $sgpr0, 456, implicit killed $scc
  ; GFX12-NEXT:   $vgpr2 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX12-NEXT:   GLOBAL_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec :: (store (s32) into %ir.out, addrspace 1)
  ; GFX12-NEXT:   S_ENDPGM 0
  call void @llvm.amdgcn.s.barrier.leave(i16 1)
  %cmp = icmp ne i32 %val, 0
  %ret = select i1 %cmp, i32 123, i32 456
  store i32 %ret, ptr addrspace(1) %out
  ret void
}

declare void @llvm.amdgcn.s.barrier.leave(i16)
