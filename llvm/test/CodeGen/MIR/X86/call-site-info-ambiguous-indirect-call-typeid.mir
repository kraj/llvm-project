# Test MIR printer and parser for type id field in callSites. It is used
# for propagating call site type identifiers to emit in the call graph section.

# RUN: llc --call-graph-section %s -run-pass=none -o - | FileCheck --match-full-lines %s
# CHECK: name: main
# CHECK: callSites:
# CHECK-NEXT: - { bb: {{.*}}, offset: {{.*}}, fwdArgRegs: [] }
# CHECK-NEXT: - { bb: {{.*}}, offset: {{.*}}, fwdArgRegs: [], calleeTypeIds:
# CHECK-NEXT: [ 1234567890 ] }

--- |  
  
  declare !type !0 i32 @_Z3addii(i32, i32)

  declare !type !0 i32 @_Z8multiplyii(i32, i32)
  
  declare !type !1 ptr @_Z13get_operationb(i1 zeroext %is_addition)
  
  define i32 @main(i32 %argc) !type !2 {
  entry:
    %retval = alloca i32, align 4
    %argc.addr = alloca i32, align 4
    %x = alloca i32, align 4
    %y = alloca i32, align 4
    %op = alloca ptr, align 8
    store i32 0, ptr %retval, align 4
    store i32 %argc, ptr %argc.addr, align 4
    store i32 5, ptr %x, align 4
    store i32 10, ptr %y, align 4
    %argc_val = load i32, ptr %argc.addr, align 4
    %rem = srem i32 %argc_val, 2
    %cmp = icmp eq i32 %rem, 0
    %call = call ptr @_Z13get_operationb(i1 zeroext %cmp)
    store ptr %call, ptr %op, align 8
    %op_val = load ptr, ptr %op, align 8
    %x_val = load i32, ptr %x, align 4
    %y_val = load i32, ptr %y, align 4
    %call1 = call i32 %op_val(i32 %x_val, i32 %y_val), !callee_type !3
    ret i32 %call1
  }
  
  !0 = !{i64 0, !"_ZTSFiiiE.generalized"}
  !1 = !{i64 0, !"_ZTSFPvbE.generalized"}
  !2 = !{i64 0, !"_ZTSFiiE.generalized"}
  !3 = !{!0}

...
---
name:            main
callSites:
  - { bb: 0, offset: 0, fwdArgRegs: [] }
  - { bb: 0, offset: 2, fwdArgRegs: [], calleeTypeIds: [ 1234567890 ] }
body:             |
  bb.0.entry:
    CALL64pcrel32 @_Z13get_operationb, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax    
    %7:gr64 = COPY $rax    
    CALL64r %7, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax

...
