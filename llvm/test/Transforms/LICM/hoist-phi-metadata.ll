; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals --version 2
; Test that hoisting conditional branches copies the debug and profiling info
; metadata from the branch being hoisted.
; RUN: opt -S -passes=licm -licm-control-flow-hoisting=1 %s -o - | FileCheck %s

define void @triangle_phi(i32 %x, ptr %p) {
; CHECK-LABEL: define void @triangle_phi
; CHECK-SAME: (i32 [[X:%.*]], ptr [[P:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[X]], 0
; CHECK-NEXT:    br i1 [[CMP1]], label [[IF_LICM:%.*]], label [[THEN_LICM:%.*]], !dbg [[DBG2:![0-9]+]], !prof [[PROF6:![0-9]+]]
; CHECK:       if.licm:
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    br label [[THEN_LICM]]
; CHECK:       then.licm:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ [[ADD]], [[IF_LICM]] ], [ [[X]], [[ENTRY:%.*]] ]
; CHECK-NEXT:    store i32 [[PHI]], ptr [[P]], align 4
; CHECK-NEXT:    [[CMP2:%.*]] = icmp ne i32 [[PHI]], 0
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    br i1 [[CMP1]], label [[IF:%.*]], label [[THEN:%.*]], !dbg [[DBG2]], !prof [[PROF6]]
; CHECK:       if:
; CHECK-NEXT:    br label [[THEN]]
; CHECK:       then:
; CHECK-NEXT:    br i1 [[CMP2]], label [[LOOP]], label [[END:%.*]], !dbg [[DBG7:![0-9]+]], !prof [[PROF8:![0-9]+]]
; CHECK:       end:
; CHECK-NEXT:    ret void
;
entry:
  br label %loop, !dbg !5
loop:
  %cmp1 = icmp sgt i32 %x, 0
  br i1 %cmp1, label %if, label %then, !dbg !6, !prof !8
if:
  %add = add i32 %x, 1
  br label %then

then:
  %phi = phi i32 [ %add, %if ], [ %x, %loop ]
  store i32 %phi, ptr %p
  %cmp2 = icmp ne i32 %phi, 0
  br i1 %cmp2, label %loop, label %end, !dbg !7, !prof !9

end:
  ret void
}

declare i32 @getv()

; indirect.goto.dest2 should get hoisted, and that should not result
; in a loss of profiling info
define i32 @test19(i1 %cond, i1 %cond2, ptr %address, i32 %v1) nounwind {
; CHECK-LABEL: define i32 @test19
; CHECK-SAME: (i1 [[COND:%.*]], i1 [[COND2:%.*]], ptr [[ADDRESS:%.*]], i32 [[V1:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[INDIRECT_GOTO_DEST:%.*]] = select i1 [[COND]], ptr blockaddress(@test19, [[EXIT:%.*]]), ptr [[ADDRESS]], !prof [[PROF9:![0-9]+]]
; CHECK-NEXT:    [[INDIRECT_GOTO_DEST2:%.*]] = select i1 [[COND2]], ptr blockaddress(@test19, [[EXIT]]), ptr [[ADDRESS]], !prof [[PROF10:![0-9]+]]
; CHECK-NEXT:    br label [[L0:%.*]]
; CHECK:       L0:
; CHECK-NEXT:    [[V2:%.*]] = call i32 @getv()
; CHECK-NEXT:    [[SINKABLE:%.*]] = mul i32 [[V1]], [[V2]]
; CHECK-NEXT:    [[SINKABLE2:%.*]] = add i32 [[V1]], [[V2]]
; CHECK-NEXT:    indirectbr ptr [[INDIRECT_GOTO_DEST]], [label [[L1:%.*]], label %exit]
; CHECK:       L1:
; CHECK-NEXT:    indirectbr ptr [[INDIRECT_GOTO_DEST2]], [label [[L0]], label %exit]
; CHECK:       exit:
; CHECK-NEXT:    [[R:%.*]] = phi i32 [ [[SINKABLE]], [[L0]] ], [ [[SINKABLE2]], [[L1]] ]
; CHECK-NEXT:    ret i32 [[R]]
;
entry:
  br label %L0
L0:
  %indirect.goto.dest = select i1 %cond, ptr blockaddress(@test19, %exit), ptr %address, !prof !10
  %v2 = call i32 @getv()
  %sinkable = mul i32 %v1, %v2
  %sinkable2 = add i32 %v1, %v2
  indirectbr ptr %indirect.goto.dest, [label %L1, label %exit]

L1:
  %indirect.goto.dest2 = select i1 %cond2, ptr blockaddress(@test19, %exit), ptr %address, !prof !11
  indirectbr ptr %indirect.goto.dest2, [label %L0, label %exit]

exit:
  %r = phi i32 [%sinkable, %L0], [%sinkable2, %L1]
  ret i32 %r
}

!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1)
!1 = !DIFile(filename: "t", directory: "/")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "triangle_phi", linkageName: "triangle_phi", scope: !1, file: !1, line: 1, unit: !0)
!5 = !DILocation(line: 1, column: 22, scope: !4)
!6 = !DILocation(line: 2, column: 22, scope: !4)
!7 = !DILocation(line: 3, column: 22, scope: !4)
!8 = !{!"branch_weights", i32 5, i32 7}
!9 = !{!"branch_weights", i32 13, i32 11}
!10 = !{!"branch_weights", i32 101, i32 189}
!11 = !{!"branch_weights", i32 67, i32 1}
;.
; CHECK: attributes #[[ATTR0]] = { nounwind }
;.
; CHECK: [[META0:![0-9]+]] = !{i32 7, !"Dwarf Version", i32 5}
; CHECK: [[META1:![0-9]+]] = !{i32 2, !"Debug Info Version", i32 3}
; CHECK: [[DBG2]] = !DILocation(line: 2, column: 22, scope: [[META3:![0-9]+]])
; CHECK: [[META3]] = distinct !DISubprogram(name: "triangle_phi", linkageName: "triangle_phi", scope: [[META4:![0-9]+]], file: [[META4]], line: 1, spFlags: DISPFlagDefinition, unit: [[META5:![0-9]+]])
; CHECK: [[META4]] = !DIFile(filename: "{{.*}}t", directory: {{.*}})
; CHECK: [[META5]] = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: [[META4]], isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug)
; CHECK: [[PROF6]] = !{!"branch_weights", i32 5, i32 7}
; CHECK: [[DBG7]] = !DILocation(line: 3, column: 22, scope: [[META3]])
; CHECK: [[PROF8]] = !{!"branch_weights", i32 13, i32 11}
; CHECK: [[PROF9]] = !{!"branch_weights", i32 101, i32 189}
; CHECK: [[PROF10]] = !{!"branch_weights", i32 67, i32 1}
;.
