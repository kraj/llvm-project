; Make sure that we can ingest the MemProf profile in YAML with CalleeGuids
; and annotate an indirect call with value profile metadata.

; RUN: split-file %s %t
; RUN: llvm-profdata merge --memprof-version=4 %t/memprof_annotate_indirect_call_yaml.yaml -o %t/memprof_annotate_indirect_call_yaml.memprofdata
; RUN: opt < %t/memprof_annotate_indirect_call_yaml.ll -passes='memprof-use<profile-filename=%t/memprof_annotate_indirect_call_yaml.memprofdata>' -S 2>&1 | FileCheck %s
; RUN: opt < %t/memprof_annotate_indirect_call_yaml.ll -passes='memprof-use<profile-filename=%t/memprof_annotate_indirect_call_yaml.memprofdata>' -memprof-attach-calleeguids=false -S 2>&1 | FileCheck %s --check-prefix=CHECK-DISABLE

;--- memprof_annotate_indirect_call_yaml.yaml
---
HeapProfileRecords:
  - GUID:            _Z3barv
    AllocSites:      []
    CallSites:
      - Frames:
          - { Function: _Z3barv, LineOffset: 3, Column: 5, IsInlineFrame: false }
        CalleeGuids:   [0x123456789abcdef0, 0x23456789abcdef01]
...
;--- memprof_annotate_indirect_call_yaml.ll
define dso_local void @_Z3barv() !dbg !4 {
entry:
  %fp = alloca ptr, align 8
  %0 = load ptr, ptr %fp, align 8
  call void %0(), !dbg !5
; CHECK: call void %0(), {{.*}} !prof ![[PROF:[0-9]+]]
; CHECK-DISABLE-NOT: !prof
  ret void
}

; CHECK: ![[PROF]] = !{!"VP", i32 0, i64 2, i64 1311768467463790320, i64 1, i64 2541551405711093505, i64 1}

!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1)
!1 = !DIFile(filename: "t", directory: "/")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "bar", linkageName: "_Z3barv", scope: !1, file: !1, line: 1, unit: !0)
!5 = !DILocation(line: 4, column: 5, scope: !4)
