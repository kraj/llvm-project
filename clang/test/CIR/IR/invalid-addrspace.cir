// RUN: cir-opt %s -verify-diagnostics -split-input-file

// -----

!u64i = !cir.int<u, 64>
// expected-error@below {{expected address space keyword}}
// expected-error@below {{expected keyword for address space kind}}
cir.func @address_space1(%p : !cir.ptr<!u64i, addrspace()>) {
  cir.return
}

// -----

!u64i = !cir.int<u, 64>
// expected-error@below {{expected target address space value}}
// expected-error@below {{expected integer value}}
cir.func @address_space2(%p : !cir.ptr<!u64i, addrspace(target<>)>) {
  cir.return
}

// -----

!u64i = !cir.int<u, 64>
// expected-error@below {{expected '<'}}
cir.func @address_space3(%p : !cir.ptr<!u64i, addrspace(target)>) {
  cir.return
}

// -----

!u64i = !cir.int<u, 64>
// expected-error@below {{expected one of [default, offload_private, offload_local, offload_global, offload_constant, offload_generic, target] for address space kind, got: foobar}}
// expected-error@below {{expected address space keyword}}
cir.func @address_space4(%p : !cir.ptr<!u64i, addrspace(foobar)>) {
  cir.return
}

// -----

!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
cir.func @cast25(%p : !cir.ptr<!u32i, addrspace(target<1>)>) {
  %0 = cir.cast(address_space, %p : !cir.ptr<!u32i, addrspace(target<1>)>), !cir.ptr<!u64i, addrspace(target<2>)> // expected-error {{requires two types differ in addrspace only}}
  cir.return
}

// -----

!u64i = !cir.int<u, 64>
cir.func @cast26(%p : !cir.ptr<!u64i, addrspace(target<1>)>) {
  %0 = cir.cast(address_space, %p : !cir.ptr<!u64i, addrspace(target<1>)>), !u64i // expected-error {{requires !cir.ptr type for source and result}}
  cir.return
}

// -----

!u64i = !cir.int<u, 64>
cir.func @cast27(%p : !u64i) {
  %0 = cir.cast(address_space, %p : !u64i), !cir.ptr<!u64i, addrspace(target<1>)> // expected-error {{requires !cir.ptr type for source and result}}
  cir.return
}

// -----

!s32i = !cir.int<s, 32>

module {
  cir.func @test_bitcast_addrspace() {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["tmp"] {alignment = 4 : i64}
    // expected-error@+1 {{'cir.cast' op result type address space does not match the address space of the operand}}
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!s32i, addrspace(offload_local)>
  }
}
